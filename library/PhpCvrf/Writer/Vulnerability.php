<?php

namespace PhpCvrf\Writer;

use PhpCvrf\Writer\Exception;

class Vulnerability
{

    protected $data = array();

    /**
     * Setters
     */

    public function setEncoding($encoding)
    {
        if (empty($encoding) || !is_string($encoding)) {
            throw new Exception\InvalidArgumentException(
                'Invalid parameter: parameter must be a non-empty string'
            );
        }
        $this->data['encoding'] = $encoding;

        return $this;
    }

    public function setLanguage($language)
    {
        if (empty($language) || !is_string($language)) {
            throw new Exception\InvalidArgumentException(
                'Invalid parameter: parameter must be a non-empty string'
            );
        }
        $this->data['language'] = $language;
        return $this;
    }

    public function setTitle($value)
    {
        if (empty($value) || !is_string($value)) {
            throw new Exception\InvalidArgumentException(
                'Invalid parameter: parameter must be a non-empty string'
            );
        }
        $this->data['title'] = $value;
        return $this;
    }

    public function setNotes($value)
    {
        if (empty($value) || !is_array($value)) {
            throw new Exception\InvalidArgumentException(
                'Invalid parameter: parameter MUST be a non-empty array where '
                . ' each element of the array is an array of "title", "audience" and '
                . ' "type" for each document note being added'
            );
        }
        foreach ($value as $note) {
            $this->addNote($note);
        }
        return $this;
    }

    public function addNote(array $note)
    {
        if (empty($note) || !is_array($note)) {
            throw new Exception\InvalidArgumentException(
                'Invalid parameter: parameter MUST be a non-empty array containing '
                . '"title", "audience" and "type" for this note'
            );
        }
        if (!isset($note['title'])) {
            throw new Exception\InvalidArgumentException(
                'Each vulnerability note MUST have a title'
            );
        }
        if (!isset($note['audience'])) {
            throw new Exception\InvalidArgumentException(
                'Each vulnerability note MUST have an audience'
            );
        }
        if (!isset($note['type'])) {
            throw new Exception\InvalidArgumentException(
                'Each vulnerability note MUST have a type'
            );
        }
        if (!isset($note['note'])) {
            throw new Exception\InvalidArgumentException(
                'Each vulnerability note MUST have the text of the note'
            );
        }
        $this->data['notes'][] = $note;
        return $this;
    }

    /**
     * Getters
     */

    public function getEncoding()
    {
        if (!array_key_exists('encoding', $this->data)) {
            return 'UTF-8';
        }
        return $this->data['encoding'];
    }

    public function getLanguage()
    {
        if (!array_key_exists('language', $this->data)) {
            return null;
        }
        return $this->data['language'];
    }

    public function getTitle()
    {
        if (!array_key_exists('title', $this->data)) {
            return null;
        }
        return $this->data['title'];
    }

    public function getNotes()
    {
        if (!array_key_exists('notes', $this->data)) {
            return null;
        }
        return $this->data['notes'];
    }

}